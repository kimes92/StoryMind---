'use client';
import { forwardRef, useRef, useEffect, useState, useCallback } from 'react';
import { MindmapNode, MindmapConnection } from '../types';

interface WorkflowCanvasProps {
  nodes: MindmapNode[];
  connections: MindmapConnection[];
  selectedNode: MindmapNode | null;
  selectedConnection: MindmapConnection | null;
  connecting: { from: string; to?: string } | null;
  onNodeSelect: (node: MindmapNode | null) => void;
  onConnectionSelect: (connection: MindmapConnection | null) => void;
  onNodeMove: (nodeId: string, updates: Partial<MindmapNode>) => void;
  onAddConnection: (source: string, target: string, type?: MindmapConnection['type']) => void;
  onStartConnection: (connecting: { from: string; to?: string } | null) => void;
  onEndConnection: () => void;
  onAddNode: (type: MindmapNode['type'], position: { x: number; y: number }) => void;
}

export const WorkflowCanvas = forwardRef<HTMLDivElement, WorkflowCanvasProps>(
  ({ 
    nodes, 
    connections, 
    selectedNode, 
    selectedConnection, 
    connecting,
    onNodeSelect, 
    onConnectionSelect, 
    onNodeMove, 
    onAddConnection, 
    onStartConnection, 
    onEndConnection,
    onAddNode 
  }, ref) => {
    const canvasRef = useRef<HTMLDivElement>(null);
    const [dragging, setDragging] = useState<{ nodeId: string; offset: { x: number; y: number } } | null>(null);
    const [zoom, setZoom] = useState(1);
    const [pan, setPan] = useState({ x: 0, y: 0 });

    // 노드 렌더링 함수
    const renderNode = (node: MindmapNode) => {
      const isSelected = selectedNode?.id === node.id;
      const isConnecting = connecting?.from === node.id;
      
      const nodeStyle = {
        left: `${node.position.x}px`,
        top: `${node.position.y}px`,
        width: `${node.size.width}px`,
        height: `${node.size.height}px`,
        backgroundColor: node.color,
        borderRadius: node.type === 'decision' ? '50%' : '12px',
        transform: `scale(${zoom})`,
        transformOrigin: 'center',
      };

      return (
        <div
          key={node.id}
          className={`absolute flex items-center justify-center cursor-move select-none text-white font-medium text-sm shadow-lg transition-all duration-200 ${
            isSelected ? 'ring-4 ring-blue-500 ring-opacity-50' : ''
          } ${isConnecting ? 'ring-4 ring-green-500 ring-opacity-50' : ''}`}
          style={nodeStyle}
          onMouseDown={(e) => handleNodeMouseDown(e, node)}
          onContextMenu={(e) => handleNodeRightClick(e, node)}
          onClick={(e) => handleNodeClick(e, node)}
        >
          <div className="text-center px-2">
            <div className="font-medium">{node.label}</div>
            {node.description && (
              <div className="text-xs opacity-80 mt-1">{node.description}</div>
            )}
          </div>
          
          {/* 연결 포인트 */}
          <div className="absolute -top-2 -right-2 w-4 h-4 bg-white rounded-full border-2 border-gray-300 opacity-0 hover:opacity-100 transition-opacity cursor-crosshair" />
        </div>
      );
    };

    // 연결 렌더링 함수
    const renderConnection = (connection: MindmapConnection) => {
      const sourceNode = nodes.find(n => n.id === connection.source);
      const targetNode = nodes.find(n => n.id === connection.target);
      
      if (!sourceNode || !targetNode) return null;
      
      const sourceCenter = {
        x: sourceNode.position.x + sourceNode.size.width / 2,
        y: sourceNode.position.y + sourceNode.size.height / 2
      };
      
      const targetCenter = {
        x: targetNode.position.x + targetNode.size.width / 2,
        y: targetNode.position.y + targetNode.size.height / 2
      };
      
      const isSelected = selectedConnection?.id === connection.id;
      const strokeWidth = connection.style?.width || 2;
      const strokeColor = connection.style?.color || '#6B7280';
      
      return (
        <g key={connection.id}>
          {/* 메인 연결선 */}
          <line
            x1={sourceCenter.x}
            y1={sourceCenter.y}
            x2={targetCenter.x}
            y2={targetCenter.y}
            stroke={isSelected ? '#3B82F6' : strokeColor}
            strokeWidth={strokeWidth}
            strokeDasharray={connection.style?.dashArray}
            className="cursor-pointer"
            onClick={() => onConnectionSelect(connection)}
          />
          
          {/* 화살표 */}
          <defs>
            <marker
              id={`arrow-${connection.id}`}
              viewBox="0 0 10 10"
              refX="9"
              refY="3"
              markerWidth="6"
              markerHeight="6"
              orient="auto"
              markerUnits="strokeWidth"
            >
              <path
                d="M0,0 L0,6 L9,3 z"
                fill={isSelected ? '#3B82F6' : strokeColor}
              />
            </marker>
          </defs>
          
          <line
            x1={sourceCenter.x}
            y1={sourceCenter.y}
            x2={targetCenter.x}
            y2={targetCenter.y}
            stroke={isSelected ? '#3B82F6' : strokeColor}
            strokeWidth={strokeWidth}
            markerEnd={`url(#arrow-${connection.id})`}
          />
          
          {/* 연결 레이블 */}
          {connection.label && (
            <text
              x={(sourceCenter.x + targetCenter.x) / 2}
              y={(sourceCenter.y + targetCenter.y) / 2 - 5}
              textAnchor="middle"
              className="text-xs fill-gray-600 font-medium"
            >
              {connection.label}
            </text>
          )}
        </g>
      );
    };

    // 노드 클릭 핸들러
    const handleNodeClick = (e: React.MouseEvent, node: MindmapNode) => {
      e.stopPropagation();
      
      if (connecting && connecting.from !== node.id) {
        // 연결 완료
        onAddConnection(connecting.from, node.id);
        onEndConnection();
      } else {
        onNodeSelect(node);
      }
    };

    // 노드 우클릭 핸들러 (연결 시작)
    const handleNodeRightClick = (e: React.MouseEvent, node: MindmapNode) => {
      e.preventDefault();
      e.stopPropagation();
      
      if (connecting) {
        onEndConnection();
      } else {
        onStartConnection({ from: node.id });
      }
    };

    // 노드 드래그 시작
    const handleNodeMouseDown = (e: React.MouseEvent, node: MindmapNode) => {
      if (e.button !== 0) return; // 좌클릭만
      
      const rect = canvasRef.current?.getBoundingClientRect();
      if (!rect) return;
      
      const offset = {
        x: e.clientX - rect.left - node.position.x,
        y: e.clientY - rect.top - node.position.y
      };
      
      setDragging({ nodeId: node.id, offset });
    };

    // 드래그 중 마우스 이동
    const handleMouseMove = useCallback((e: MouseEvent) => {
      if (!dragging || !canvasRef.current) return;
      
      const rect = canvasRef.current.getBoundingClientRect();
      const newPosition = {
        x: e.clientX - rect.left - dragging.offset.x,
        y: e.clientY - rect.top - dragging.offset.y
      };
      
      onNodeMove(dragging.nodeId, { position: newPosition });
    }, [dragging, onNodeMove]);

    // 드래그 종료
    const handleMouseUp = useCallback(() => {
      setDragging(null);
    }, []);

    // 캔버스 클릭 (선택 해제)
    const handleCanvasClick = (e: React.MouseEvent) => {
      if (e.target === canvasRef.current) {
        onNodeSelect(null);
        onConnectionSelect(null);
        if (connecting) {
          onEndConnection();
        }
      }
    };

    // 드래그 앤 드롭 핸들러
    const handleDrop = (e: React.DragEvent) => {
      e.preventDefault();
      
      try {
        const data = JSON.parse(e.dataTransfer.getData('application/json'));
        if (data.type === 'node') {
          const rect = canvasRef.current?.getBoundingClientRect();
          if (!rect) return;
          
          const position = {
            x: e.clientX - rect.left - 70, // 노드 중심에 맞추기
            y: e.clientY - rect.top - 40
          };
          
          onAddNode(data.nodeType, position);
        }
      } catch (error) {
        console.error('드롭 데이터 파싱 실패:', error);
      }
    };

    const handleDragOver = (e: React.DragEvent) => {
      e.preventDefault();
    };

    // 이벤트 리스너 등록
    useEffect(() => {
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
      
      return () => {
        document.removeEventListener('mousemove', handleMouseMove);
        document.removeEventListener('mouseup', handleMouseUp);
      };
    }, [handleMouseMove, handleMouseUp]);

    // 줌 핸들러
    const handleWheel = (e: React.WheelEvent) => {
      e.preventDefault();
      const delta = e.deltaY > 0 ? -0.1 : 0.1;
      setZoom(prev => Math.max(0.1, Math.min(3, prev + delta)));
    };

    return (
      <div
        ref={canvasRef}
        className="relative w-full h-full bg-gray-100 overflow-hidden"
        onClick={handleCanvasClick}
        onDrop={handleDrop}
        onDragOver={handleDragOver}
        onWheel={handleWheel}
      >
        {/* 그리드 배경 */}
        <div 
          className="absolute inset-0 opacity-20"
          style={{
            backgroundImage: `
              linear-gradient(rgba(0,0,0,0.1) 1px, transparent 1px),
              linear-gradient(90deg, rgba(0,0,0,0.1) 1px, transparent 1px)
            `,
            backgroundSize: '20px 20px'
          }}
        />
        
        {/* SVG 연결선 */}
        <svg className="absolute inset-0 w-full h-full pointer-events-none" style={{ zIndex: 1 }}>
          {connections.map(renderConnection)}
        </svg>
        
        {/* 노드들 */}
        <div className="absolute inset-0" style={{ zIndex: 2 }}>
          {nodes.map(renderNode)}
        </div>
        
        {/* 연결 모드 오버레이 */}
        {connecting && (
          <div className="absolute top-4 left-4 bg-blue-500 text-white px-4 py-2 rounded-lg shadow-lg z-10">
            연결할 대상 노드를 클릭하거나 우클릭으로 취소하세요
          </div>
        )}
        
        {/* 줌 컨트롤 */}
        <div className="absolute bottom-4 right-4 bg-white rounded-lg shadow-lg p-2 flex items-center space-x-2 z-10">
          <button
            onClick={() => setZoom(prev => Math.max(0.1, prev - 0.1))}
            className="w-8 h-8 flex items-center justify-center bg-gray-100 hover:bg-gray-200 rounded"
          >
            -
          </button>
          <span className="text-sm font-medium px-2">{Math.round(zoom * 100)}%</span>
          <button
            onClick={() => setZoom(prev => Math.min(3, prev + 0.1))}
            className="w-8 h-8 flex items-center justify-center bg-gray-100 hover:bg-gray-200 rounded"
          >
            +
          </button>
        </div>
      </div>
    );
  }
);

WorkflowCanvas.displayName = 'WorkflowCanvas'; 