/**
 * 완료 페이지 컴포넌트 - 플로우차트 형태
 * 사용자가 작성한 스토리브랜드 결과를 플로우차트로 보여줍니다.
 */

import React, { useRef, useState } from 'react';
import { BookOpen, Download, ChevronRight, Star, ArrowRight, User, Save, History, Edit3, X } from 'lucide-react';
import { CATEGORIES, STEP_FEEDBACK, STEPS } from '../constants';
import { StoryData } from '../types';
import { downloadMindmap } from '../utils/mindmapDownload';
import { StoryStorageService } from '../utils/storyStorage';
import { calculateStoryScore, ScoreResult } from '../utils/scoreCalculator';
import { useAuthState } from 'react-firebase-hooks/auth';
import { auth } from '@/app/lib/firebase';
import { useRouter } from 'next/navigation';

interface ResultPageProps {
  storyData: StoryData;
  selectedCategory: string;
  onResetGuide: () => void;
  onUpdateStoryData?: (updatedData: StoryData) => void;
}

export const ResultPage: React.FC<ResultPageProps> = ({
  storyData,
  selectedCategory,
  onResetGuide,
  onUpdateStoryData
}) => {
  const mindmapRef = useRef<HTMLDivElement>(null);
  const [user, loading, error] = useAuthState(auth);
  const [isSaving, setIsSaving] = useState(false);
  const [saveStatus, setSaveStatus] = useState<'idle' | 'success' | 'error'>('idle');
  const [storyTitle, setStoryTitle] = useState('');
  const [showSaveDialog, setShowSaveDialog] = useState(false);
  const [editingStep, setEditingStep] = useState<number | null>(null);
  const [editContent, setEditContent] = useState('');
  const [localStoryData, setLocalStoryData] = useState(storyData);
  const router = useRouter();

  // 선택된 카테고리 정보 가져오기
  const category = CATEGORIES.find(c => c.id === selectedCategory);

  // 단계별 데이터 및 점수 계산
  const stepDataWithScores = STEP_FEEDBACK.map((step, index) => {
    const content = localStoryData[`step${index + 1}` as keyof StoryData] as string;
    const scoreResult = calculateStoryScore(content, index);
    return {
      ...step,
      content,
      scoreResult
    };
  });

  // 마인드맵 다운로드 핸들러
  const handleDownloadMindmap = () => {
    downloadMindmap(localStoryData, selectedCategory);
  };

  // 스토리 저장 핸들러
  const handleSaveStory = async () => {
    if (!user) {
      alert('로그인이 필요합니다.');
      return;
    }

    if (!storyTitle.trim()) {
      alert('스토리 제목을 입력해주세요.');
      return;
    }

    setIsSaving(true);
    setSaveStatus('idle');

    try {
      const storageService = StoryStorageService.getInstance();
      const storyId = await storageService.saveStory(
        user.uid,
        storyTitle,
        selectedCategory,
        localStoryData
      );

      setSaveStatus('success');
      setShowSaveDialog(false);
      setStoryTitle('');
      
      // 3초 후 성공 메시지 제거
      setTimeout(() => {
        setSaveStatus('idle');
      }, 3000);
      
    } catch (error) {
      console.error('Error saving story:', error);
      setSaveStatus('error');
    } finally {
      setIsSaving(false);
    }
  };

  // 히스토리 페이지로 이동
  const handleViewHistory = () => {
    router.push('/story-brand-guide/history');
  };

  // 편집 모달 열기
  const handleEditStep = (stepIndex: number) => {
    setEditingStep(stepIndex);
    setEditContent(localStoryData[`step${stepIndex + 1}` as keyof StoryData] as string);
  };

  // 편집 내용 저장
  const handleSaveEdit = () => {
    if (editingStep !== null) {
      const updatedData = {
        ...localStoryData,
        [`step${editingStep + 1}`]: editContent
      };
      setLocalStoryData(updatedData);
      if (onUpdateStoryData) {
        onUpdateStoryData(updatedData);
      }
      setEditingStep(null);
      setEditContent('');
    }
  };

  // 편집 취소
  const handleCancelEdit = () => {
    setEditingStep(null);
    setEditContent('');
  };

  // 단계별 컬러 배열
  const stepColors = [
    'bg-red-50 border-red-200',
    'bg-orange-50 border-orange-200', 
    'bg-yellow-50 border-yellow-200',
    'bg-green-50 border-green-200',
    'bg-blue-50 border-blue-200',
    'bg-purple-50 border-purple-200',
    'bg-pink-50 border-pink-200'
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 p-8">
      <div className="max-w-7xl mx-auto">
        {/* 헤더 섹션 */}
        <div className="text-center mb-12">
          <div className="w-20 h-20 bg-white rounded-full flex items-center justify-center mx-auto mb-6 shadow-lg">
            <BookOpen className="w-10 h-10 text-blue-600" />
          </div>
          <h1 className="text-4xl font-bold text-gray-800 mb-4">
            Your Story Brand Journey 🎉
          </h1>
          <p className="text-xl text-gray-600 max-w-2xl mx-auto">
            당신의 {category?.name} 스토리가 완성되었습니다. 각 단계별로 결과를 확인해보세요!
          </p>
        </div>

        {/* 플로우차트 섹션 */}
        <div ref={mindmapRef} className="relative">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-12">
            {stepDataWithScores.map((step, index) => (
              <div key={index} className="relative">
                {/* 메인 카드 */}
                <div className={`${stepColors[index]} border-2 rounded-2xl p-6 shadow-lg hover:shadow-xl transition-shadow duration-300 bg-white`}>
                  {/* 프로필 섹션 */}
                  <div className="flex items-center mb-4">
                    <div className="w-12 h-12 bg-gray-200 rounded-full flex items-center justify-center mr-3">
                      <User className="w-6 h-6 text-gray-600" />
                    </div>
                    <div>
                      <h4 className="font-semibold text-gray-800">Step {index + 1}</h4>
                      <div className="flex items-center">
                        {[...Array(5)].map((_, i) => (
                          <Star 
                            key={i} 
                            className={`w-4 h-4 ${i < step.scoreResult.score ? 'text-yellow-400 fill-current' : 'text-gray-300'}`} 
                          />
                        ))}
                        <span className="ml-2 text-sm text-gray-600">({step.scoreResult.score}/5)</span>
                      </div>
                    </div>
                  </div>

                  {/* 단계 제목 */}
                  <h3 className="text-lg font-bold text-gray-800 mb-3">
                    {step.title}
                  </h3>

                  {/* 내용 */}
                  <div className="bg-gray-50 rounded-lg p-4 mb-4 min-h-[120px]">
                    <p className="text-gray-700 text-sm leading-relaxed">
                      {step.content}
                    </p>
                  </div>

                  {/* 단계 번호 표시 */}
                  <div className="absolute -top-3 -left-3 w-8 h-8 bg-blue-500 text-white rounded-full flex items-center justify-center font-bold text-sm">
                    {String(index + 1).padStart(2, '0')}
                  </div>
                </div>

                {/* 피드백 말풍선 - 위치 10% 상승 */}
                <div className="absolute -right-4 top-[40%] transform -translate-y-1/2 hidden lg:block">
                  <button
                    onClick={() => handleEditStep(index)}
                    className="bg-white border border-gray-200 rounded-lg p-4 shadow-md max-w-xs relative hover:bg-gray-50 transition-colors cursor-pointer group"
                  >
                    <div className="absolute left-0 top-1/2 transform -translate-y-1/2 -translate-x-2 w-0 h-0 border-t-[8px] border-t-transparent border-b-[8px] border-b-transparent border-r-[8px] border-r-white"></div>
                    <div className="flex items-center justify-between mb-2">
                      <p className="text-blue-600 text-sm font-medium">
                        {step.scoreResult.feedback}
                      </p>
                      <Edit3 className="w-4 h-4 text-gray-400 group-hover:text-blue-600 transition-colors" />
                    </div>
                    {step.scoreResult.suggestions.length > 0 && (
                      <div className="mt-2 text-xs text-gray-600">
                        <div className="font-medium mb-1">💡 개선 제안:</div>
                        <ul className="space-y-1">
                          {step.scoreResult.suggestions.map((suggestion, idx) => (
                            <li key={idx} className="flex items-start">
                              <span className="text-blue-500 mr-1">•</span>
                              <span>{suggestion}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </button>
                </div>

                {/* 화살표 연결선 */}
                {index < stepDataWithScores.length - 1 && (
                  <div className="hidden lg:block absolute -bottom-8 left-1/2 transform -translate-x-1/2">
                    <ArrowRight className="w-6 h-6 text-blue-500 transform rotate-90" />
                  </div>
                )}
              </div>
            ))}
          </div>

          {/* 연결선 (데스크톱에서만) */}
          <div className="hidden lg:block absolute inset-0 pointer-events-none">
            <svg className="w-full h-full">
              <defs>
                <marker id="arrowhead" markerWidth="10" markerHeight="7" 
                refX="9" refY="3.5" orient="auto">
                  <polygon points="0 0, 10 3.5, 0 7" fill="#3B82F6" />
                </marker>
              </defs>
              
              {/* 단계별 연결선 */}
              {stepDataWithScores.slice(0, -1).map((_, index) => (
                <g key={index}>
                  {/* 곡선 연결선 */}
                  <path
                    d={`M ${33.33 * (index + 1)}% ${200 + (index * 320)}
                       Q ${33.33 * (index + 1) + 16.67}% ${240 + (index * 320)}
                       ${33.33 * (index + 2)}% ${280 + (index * 320)}`}
                    stroke="#3B82F6"
                    strokeWidth="2"
                    fill="none"
                    markerEnd="url(#arrowhead)"
                    opacity="0.6"
                  />
                </g>
              ))}
            </svg>
          </div>
        </div>

        {/* 전체 점수 요약 */}
        <div className="bg-white rounded-2xl shadow-lg p-8 mb-8">
          <h2 className="text-2xl font-bold text-gray-800 mb-6 text-center">
            📊 전체 점수 요약
          </h2>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
            <div className="text-center">
              <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <span className="text-2xl">📈</span>
              </div>
              <h3 className="font-semibold text-gray-800 mb-2">평균 점수</h3>
              <p className="text-3xl font-bold text-blue-600">
                {(stepDataWithScores.reduce((sum, step) => sum + step.scoreResult.score, 0) / stepDataWithScores.length).toFixed(1)}
              </p>
            </div>
            
            <div className="text-center">
              <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <span className="text-2xl">⭐</span>
              </div>
              <h3 className="font-semibold text-gray-800 mb-2">최고 점수</h3>
              <p className="text-3xl font-bold text-green-600">
                {Math.max(...stepDataWithScores.map(step => step.scoreResult.score))}
              </p>
            </div>
            
            <div className="text-center">
              <div className="w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <span className="text-2xl">🎯</span>
              </div>
              <h3 className="font-semibold text-gray-800 mb-2">완성도</h3>
              <p className="text-3xl font-bold text-purple-600">
                {Math.round((stepDataWithScores.reduce((sum, step) => sum + step.scoreResult.score, 0) / (stepDataWithScores.length * 5)) * 100)}%
              </p>
            </div>
          </div>

          {/* 단계별 점수 바 */}
          <div className="space-y-3">
            {stepDataWithScores.map((step, index) => (
              <div key={index} className="flex items-center space-x-3">
                <div className="w-16 text-sm text-gray-600">Step {index + 1}</div>
                <div className="flex-1 bg-gray-200 rounded-full h-3">
                  <div 
                    className="bg-gradient-to-r from-blue-500 to-purple-600 h-3 rounded-full transition-all duration-300"
                    style={{ width: `${(step.scoreResult.score / 5) * 100}%` }}
                  ></div>
                </div>
                <div className="w-12 text-sm text-gray-600 text-right">{step.scoreResult.score}/5</div>
              </div>
            ))}
          </div>
        </div>

        {/* 행동 가이드 섹션 */}
        <div className="bg-gradient-to-r from-blue-500 to-purple-600 rounded-2xl p-8 mb-8 text-white">
          <h3 className="text-2xl font-bold mb-6 text-center">
            💡 Next Action Steps
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
            <div className="flex items-center space-x-3">
              <div className="w-6 h-6 bg-white bg-opacity-20 rounded-full flex items-center justify-center">
                <span className="text-xs font-bold">1</span>
              </div>
              <span>가장 중요한 첫 번째 단계부터 시작하세요</span>
            </div>
            <div className="flex items-center space-x-3">
              <div className="w-6 h-6 bg-white bg-opacity-20 rounded-full flex items-center justify-center">
                <span className="text-xs font-bold">2</span>
              </div>
              <span>매일 작은 진전을 만들어가세요</span>
            </div>
            <div className="flex items-center space-x-3">
              <div className="w-6 h-6 bg-white bg-opacity-20 rounded-full flex items-center justify-center">
                <span className="text-xs font-bold">3</span>
              </div>
              <span>어려움이 있을 때 가이드에게 도움을 요청하세요</span>
            </div>
            <div className="flex items-center space-x-3">
              <div className="w-6 h-6 bg-white bg-opacity-20 rounded-full flex items-center justify-center">
                <span className="text-xs font-bold">4</span>
              </div>
              <span>정기적으로 진행상황을 점검하고 조정하세요</span>
            </div>
          </div>
        </div>

        {/* 저장 상태 메시지 */}
        {saveStatus === 'success' && (
          <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded-lg mb-8 text-center">
            <p className="font-medium">✅ 스토리가 성공적으로 저장되었습니다!</p>
          </div>
        )}

        {saveStatus === 'error' && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg mb-8 text-center">
            <p className="font-medium">❌ 스토리 저장 중 오류가 발생했습니다.</p>
          </div>
        )}

        {/* 버튼 섹션 */}
        <div className="flex justify-center space-x-4">
          <button
            onClick={onResetGuide}
            className="bg-white hover:bg-gray-50 text-gray-700 px-6 py-3 rounded-xl font-medium transition-colors shadow-lg border border-gray-200"
          >
            새 스토리 만들기
          </button>
          
          <button
            onClick={() => setShowSaveDialog(true)}
            disabled={!user || isSaving}
            className="bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-xl font-medium transition-colors shadow-lg flex items-center space-x-2 disabled:bg-gray-400"
          >
            <Save className="w-5 h-5" />
            <span>{isSaving ? '저장 중...' : '스토리 저장'}</span>
          </button>
          
          <button
            onClick={handleViewHistory}
            disabled={!user}
            className="bg-purple-600 hover:bg-purple-700 text-white px-6 py-3 rounded-xl font-medium transition-colors shadow-lg flex items-center space-x-2 disabled:bg-gray-400"
          >
            <History className="w-5 h-5" />
            <span>히스토리 보기</span>
          </button>
          
          <button
            onClick={handleDownloadMindmap}
            className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-xl font-medium transition-colors shadow-lg flex items-center space-x-2"
          >
            <Download className="w-5 h-5" />
            <span>마인드맵 다운로드</span>
          </button>
        </div>

        {/* 편집 모달 */}
        {editingStep !== null && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg p-8 max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
              <div className="flex justify-between items-center mb-6">
                <h3 className="text-2xl font-bold text-gray-800">
                  Step {editingStep + 1} 편집
                </h3>
                <button
                  onClick={handleCancelEdit}
                  className="text-gray-400 hover:text-gray-600 transition-colors"
                >
                  <X className="w-6 h-6" />
                </button>
              </div>
              
                             <div className="mb-4">
                 <h4 className="font-semibold text-gray-700 mb-2">
                   {STEPS[editingStep].title}
                 </h4>
                 <p className="text-sm text-gray-600 mb-4">
                   {STEPS[editingStep].description}
                 </p>
               </div>
              
              <textarea
                value={editContent}
                onChange={(e) => setEditContent(e.target.value)}
                className="w-full h-40 px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                placeholder="여기에 내용을 입력하세요..."
              />
              
              {/* 실시간 점수 미리보기 */}
              {editContent && (
                <div className="mt-4 p-4 bg-gray-50 rounded-lg">
                  <h5 className="font-medium text-gray-700 mb-2">점수 미리보기</h5>
                  <div className="flex items-center space-x-2">
                    {[...Array(5)].map((_, i) => (
                      <Star 
                        key={i} 
                        className={`w-4 h-4 ${i < calculateStoryScore(editContent, editingStep).score ? 'text-yellow-400 fill-current' : 'text-gray-300'}`} 
                      />
                    ))}
                    <span className="text-sm text-gray-600">
                      ({calculateStoryScore(editContent, editingStep).score}/5)
                    </span>
                  </div>
                  <p className="text-sm text-blue-600 mt-2">
                    {calculateStoryScore(editContent, editingStep).feedback}
                  </p>
                </div>
              )}
              
              <div className="flex justify-end space-x-4 mt-6">
                <button
                  onClick={handleCancelEdit}
                  className="px-6 py-3 text-gray-600 hover:text-gray-800 transition-colors"
                >
                  취소
                </button>
                <button
                  onClick={handleSaveEdit}
                  className="px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors"
                >
                  저장
                </button>
              </div>
            </div>
          </div>
        )}

        {/* 저장 다이얼로그 */}
        {showSaveDialog && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg p-8 max-w-md w-full mx-4">
              <h3 className="text-2xl font-bold text-gray-800 mb-4">스토리 저장</h3>
              <p className="text-gray-600 mb-6">
                나중에 쉽게 찾을 수 있도록 스토리에 제목을 붙여주세요.
              </p>
              
              <input
                type="text"
                value={storyTitle}
                onChange={(e) => setStoryTitle(e.target.value)}
                placeholder="예: 창업 준비를 위한 첫 번째 스토리"
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent mb-6"
                maxLength={100}
              />
              
              <div className="flex justify-end space-x-4">
                <button
                  onClick={() => {
                    setShowSaveDialog(false);
                    setStoryTitle('');
                  }}
                  className="px-6 py-3 text-gray-600 hover:text-gray-800 transition-colors"
                >
                  취소
                </button>
                <button
                  onClick={handleSaveStory}
                  disabled={!storyTitle.trim() || isSaving}
                  className="px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors disabled:bg-gray-400"
                >
                  {isSaving ? '저장 중...' : '저장'}
                </button>
              </div>
            </div>
          </div>
        )}

        {/* 로그인 안내 */}
        {!user && (
          <div className="bg-yellow-50 border border-yellow-200 text-yellow-800 px-4 py-3 rounded-lg mt-8 text-center">
            <p className="font-medium">💡 스토리를 저장하고 히스토리를 보려면 로그인이 필요합니다.</p>
          </div>
        )}
      </div>
    </div>
  );
}; 